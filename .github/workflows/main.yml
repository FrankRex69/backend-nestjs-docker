name: Deploy
on:
  pull_request:
    branches: [ main ]
    types: [ closed ]
jobs:
  Stop_and_remove_container:
    name: Stop and remove container
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2 
      - name: Stop & Remove
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${{secrets.USER_NAME}}@${{secrets.SSH_HOST_PROD}} '
          docker stop backend-development
          docker rm $(docker ps -a -q)
          docker system prune -af
          '
  Build_image_app_and_publish:
    needs: Stop_and_remove_container
    runs-on: ubuntu-latest 
    name: Build and Push image
    steps:
      - uses: actions/checkout@v3 
      - name: Build & Push image
        run: |
          docker login -u "francesco.re69@gmail.com" -p "Lillone19" docker.io
          docker build --target development -t 3481974/backend-development-server:backend-development-server .
          docker push docker.io/3481974/backend-development-server:backend-development-server
  Build_Containers:
    needs: Build_image_app_and_publish
    name: Build containers
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v3 
      - name: Build containers
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${{secrets.USER_NAME}}@${{secrets.SSH_HOST_PROD}} '
          docker network create proxy
          docker run --name postgresbase --network proxy \
          -e POSTGRES_HOST=${{secrets.PG_HOST}} \
          -e POSTGRES_DB=${{secrets.PG_DB}} \
          -e POSTGRES_USER=${{secrets.PG_USER}} \
          -e POSTGRES_PASSWORD=${{secrets.PG_PASSWORD}} \
          -e TZ=Europe/Rome \
          -e PGTZ=Europe/Rome \
          -p 5432:5432 \
          -v /var/lib/docker/volumes/postgresql_data:/var/lib/postgresql/data \
          -v /var/lib/docker/init_docker/init.sql:/docker-entrypoint-initdb.d/init.sql \
          -d postgis/postgis:13-3.1-alpine
          docker run --name pgadmin --network proxy -p 5050:80 -e "PGADMIN_DEFAULT_EMAIL=admin@admin.com" -e "PGADMIN_DEFAULT_PASSWORD=root" -d dpage/pgadmin4
          docker run --name backend-development --network proxy \
          -e PG_HOST=${{secrets.PG_HOST}}  \
          -e PG_DB=${{secrets.PG_DB}}  \
          -e PG_USER=${{secrets.PG_USER}}  \
          -e PG_PASSWORD=${{secrets.PG_PASSWORD}}  \
          -e PG_SCHEMA=${{secrets.PG_SCHEMA}}  \
          -e PG_PORT=${{secrets.PG_PORT}}  \
          -e TZ=Europe/Rome \
          -e PGTZ=Europe/Rome \
          -p 7000:7000 \
          -d 3481974/backend-development-server:backend-development-server
          '
